@page "/tarefas/pendentes"
@inject ITarefaService TarefaService
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Tarefas Pendentes - IbnelveApi</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/" class="text-decoration-none">
                            <i class="fas fa-home me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/tarefas" class="text-decoration-none">
                            <i class="fas fa-tasks me-1"></i>Tarefas
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-pause-circle me-1"></i>Pendentes
                    </li>
                </ol>
            </nav>

            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="fas fa-pause-circle me-2 text-warning"></i>
                        Tarefas Pendentes
                    </h1>
                    <p class="text-muted mb-0">
                        @if (tarefas != null)
                        {
                            <span>@tarefas.Count tarefas aguardando inÃ­cio â€¢ Organize suas prioridades</span>
                        }
                        else
                        {
                            <span>Carregando tarefas pendentes...</span>
                        }
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/tarefas/nova" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Nova Tarefa
                    </a>
                    <a href="/tarefas" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Todas as Tarefas
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-warning mb-3" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                        <h5>Carregando tarefas pendentes...</h5>
                        <p class="text-muted">Buscando tarefas aguardando inÃ­cio.</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-exclamation-triangle me-2"></i>Erro ao carregar
                    </h4>
                    <p>@errorMessage</p>
                    <hr>
                    <button class="btn btn-outline-danger" @onclick="LoadTarefas">
                        <i class="fas fa-sync-alt me-2"></i>Tentar novamente
                    </button>
                </div>
            </div>
        </div>
    }
    else if (tarefas?.Count == 0)
    {
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card border-success">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-check-circle fa-4x text-success mb-3"></i>
                        <h4 class="text-success">Excelente! Nenhuma tarefa pendente!</h4>
                        <p class="text-muted mb-4">
                            VocÃª estÃ¡ em dia com suas tarefas. Todas foram iniciadas ou concluÃ­das.
                        </p>
                        <div class="d-flex gap-2 justify-content-center">
                            <a href="/tarefas/em-andamento" class="btn btn-outline-info">
                                <i class="fas fa-play-circle me-2"></i>Ver Em Andamento
                            </a>
                            <a href="/tarefas/nova" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Criar Nova Tarefa
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- EstatÃ­sticas de Planejamento -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-warning text-dark">
                    <div class="card-body text-center">
                        <i class="fas fa-pause-circle fa-2x mb-2"></i>
                        <h4>@tarefas.Count</h4>
                        <small>Tarefas Pendentes</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-fire fa-2x mb-2"></i>
                        <h4>@GetTarefasAltaPrioridade()</h4>
                        <small>Alta/CrÃ­tica</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-calendar-times fa-2x mb-2"></i>
                        <h4>@GetTarefasComPrazo()</h4>
                        <small>Com Prazo</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-secondary text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-tags fa-2x mb-2"></i>
                        <h4>@GetCategoriasUnicas()</h4>
                        <small>Categorias</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- SugestÃ£o de AÃ§Ã£o -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-warning border-warning" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-lightbulb fa-2x me-3"></i>
                        <div class="flex-grow-1">
                            <h5 class="alert-heading mb-1">Hora de comeÃ§ar!</h5>
                            <p class="mb-2">
                                VocÃª tem <strong>@tarefas.Count tarefas pendentes</strong>. 
                                @if (GetTarefasAltaPrioridade() > 0)
                                {
                                    <span class="fw-bold">Comece pelas de alta prioridade!</span>
                                }
                                Que tal iniciar uma agora?
                            </p>
                        </div>
                        <div>
                            <button class="btn btn-light btn-sm" @onclick="IniciarTarefasPrioritarias">
                                <i class="fas fa-play me-1"></i>Iniciar PrioritÃ¡rias
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-end">
                            <div class="col-md-4">
                                <label class="form-label">Filtrar por Prioridade</label>
                                <select class="form-select" @onchange="FiltrarPorPrioridade">
                                    <option value="">Todas as prioridades</option>
                                    <option value="@PrioridadeTarefa.Critica">ðŸ”´ CrÃ­tica</option>
                                    <option value="@PrioridadeTarefa.Alta">ðŸŸ  Alta</option>
                                    <option value="@PrioridadeTarefa.Media">ðŸŸ¡ MÃ©dia</option>
                                    <option value="@PrioridadeTarefa.Baixa">ðŸŸ¢ Baixa</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Filtrar por Categoria</label>
                                <select class="form-select" @onchange="FiltrarPorCategoria">
                                    <option value="">Todas as categorias</option>
                                    @foreach (var categoria in GetCategorias())
                                    {
                                        <option value="@categoria">@categoria</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Ordenar por</label>
                                <select class="form-select" @onchange="OrdenarTarefas">
                                    <option value="prioridade">Prioridade</option>
                                    <option value="vencimento">Data de Vencimento</option>
                                    <option value="criacao">Data de CriaÃ§Ã£o</option>
                                    <option value="titulo">TÃ­tulo</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de Tarefas Pendentes -->
        <div class="row">
            @foreach (var tarefa in tarefasFiltradas)
            {
                <div class="col-lg-6 mb-4">
                    <div class="card border-warning shadow-sm h-100">
                        <div class="card-header bg-warning text-dark">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">
                                    <i class="fas fa-pause-circle me-2"></i>
                                    @tarefa.Titulo
                                </h6>
                                <div class="d-flex gap-1">
                                    <span class="badge bg-@GetPrioridadeColor(tarefa.Prioridade)">
                                        @GetPrioridadeIcon(tarefa.Prioridade) @tarefa.PrioridadeDescricao
                                    </span>
                                    @if (tarefa.DataVencimento.HasValue && (tarefa.DataVencimento.Value.Date - DateTime.Today).Days <= 3)
                                    {
                                        <span class="badge bg-danger">
                                            <i class="fas fa-clock me-1"></i>Urgente
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-3">
                                @(tarefa.Descricao.Length > 100 ? tarefa.Descricao.Substring(0, 100) + "..." : tarefa.Descricao)
                            </p>
                            
                            <div class="row mb-3">
                                <div class="col-6">
                                    <small class="text-muted d-block">Criada em</small>
                                    <strong class="text-secondary">
                                        <i class="fas fa-calendar-plus me-1"></i>
                                        @tarefa.CreatedAt.ToString("dd/MM/yyyy")
                                    </strong>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted d-block">Aguardando hÃ¡</small>
                                    <strong class="text-warning">
                                        <i class="fas fa-clock me-1"></i>
                                        @GetTempoEspera(tarefa) dias
                                    </strong>
                                </div>
                            </div>

                            @if (tarefa.DataVencimento.HasValue)
                            {
                                <div class="row mb-3">
                                    <div class="col-12">
                                        <small class="text-muted d-block">Vencimento</small>
                                        <strong class="@GetCorVencimento(tarefa)">
                                            <i class="fas fa-calendar-alt me-1"></i>
                                            @tarefa.DataVencimento.Value.ToString("dd/MM/yyyy")
                                            @if (tarefa.EstaVencida)
                                            {
                                                <span class="badge bg-danger ms-1">Vencida</span>
                                            }
                                            else
                                            {
                                                var diasRestantes = (tarefa.DataVencimento.Value.Date - DateTime.Today).Days;
                                                if (diasRestantes <= 3)
                                                {
                                                    <span class="badge bg-warning text-dark ms-1">@diasRestantes dias</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-info ms-1">@diasRestantes dias</span>
                                                }
                                            }
                                        </strong>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(tarefa.Categoria))
                            {
                                <div class="mb-3">
                                    <span class="badge bg-secondary">
                                        <i class="fas fa-tag me-1"></i>@tarefa.Categoria
                                    </span>
                                </div>
                            }

                            <div class="d-flex gap-2">
                                <a href="/tarefas/@tarefa.Id" class="btn btn-outline-info btn-sm">
                                    <i class="fas fa-eye me-1"></i>Ver
                                </a>
                                <a href="/tarefas/@tarefa.Id/editar" class="btn btn-outline-warning btn-sm">
                                    <i class="fas fa-edit me-1"></i>Editar
                                </a>
                                <button class="btn btn-info btn-sm" @onclick="() => IniciarTarefa(tarefa.Id)">
                                    <i class="fas fa-play me-1"></i>Iniciar
                                </button>
                            </div>
                        </div>
                        <div class="card-footer bg-light">
                            <small class="text-muted">
                                <i class="fas fa-calendar-plus me-1"></i>
                                Criada em @tarefa.CreatedAt.ToString("dd/MM/yyyy") â€¢ 
                                <i class="fas fa-pause-circle me-1 text-warning"></i>
                                Aguardando hÃ¡ @GetTempoEspera(tarefa) dias
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Dicas de Produtividade -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card bg-light">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-lightbulb me-2 text-warning"></i>
                            Dicas para Organizar suas Tarefas
                        </h5>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="p-3 text-center">
                                    <i class="fas fa-fire fa-2x text-danger mb-2"></i>
                                    <h6>Priorize</h6>
                                    <small class="text-muted">Comece sempre pelas tarefas de alta prioridade</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="p-3 text-center">
                                    <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                                    <h6>Prazos</h6>
                                    <small class="text-muted">Foque nas tarefas com vencimento prÃ³ximo</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="p-3 text-center">
                                    <i class="fas fa-balance-scale fa-2x text-info mb-2"></i>
                                    <h6>Equilibre</h6>
                                    <small class="text-muted">NÃ£o inicie muitas tarefas ao mesmo tempo</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TarefaDto>? tarefas;
    private List<TarefaDto> tarefasFiltradas = new();
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private string filtroCategoria = string.Empty;
    private PrioridadeTarefa? filtroPrioridade = null;
    private string ordenacao = "prioridade";

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadTarefas();
    }

    private async Task LoadTarefas()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await TarefaService.GetByStatusAsync(StatusTarefa.Pendente);
            if (result.Success && result.Data != null)
            {
                tarefas = result.Data.ToList();
                AplicarFiltros();
            }
            else
            {
                errorMessage = result.Message ?? "Erro ao carregar tarefas pendentes.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task IniciarTarefa(int tarefaId)
    {
        try
        {
            var tarefa = tarefas?.FirstOrDefault(t => t.Id == tarefaId);
            if (tarefa == null) return;

            var updateDto = new UpdateTarefaDto
            {
                Titulo = tarefa.Titulo,
                Descricao = tarefa.Descricao,
                Status = StatusTarefa.EmAndamento,
                Prioridade = tarefa.Prioridade,
                Categoria = tarefa.Categoria,
                DataVencimento = tarefa.DataVencimento
            };

            var result = await TarefaService.UpdateAsync(tarefaId, updateDto);
            if (result.Success)
            {
                await LoadTarefas(); // Recarregar lista
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao iniciar tarefa: " + ex.Message;
        }
    }

    private async Task IniciarTarefasPrioritarias()
    {
        if (tarefas == null) return;

        try
        {
            var tarefasPrioritarias = tarefas.Where(t => t.Prioridade == PrioridadeTarefa.Critica || t.Prioridade == PrioridadeTarefa.Alta).ToList();
            
            foreach (var tarefa in tarefasPrioritarias)
            {
                await IniciarTarefa(tarefa.Id);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao iniciar tarefas prioritÃ¡rias: " + ex.Message;
        }
    }

    private void FiltrarPorPrioridade(ChangeEventArgs e)
    {
        var valor = e.Value?.ToString();
        if (string.IsNullOrEmpty(valor))
        {
            filtroPrioridade = null;
        }
        else if (Enum.TryParse<PrioridadeTarefa>(valor, out var prioridade))
        {
            filtroPrioridade = prioridade;
        }
        AplicarFiltros();
    }

    private void FiltrarPorCategoria(ChangeEventArgs e)
    {
        filtroCategoria = e.Value?.ToString() ?? string.Empty;
        AplicarFiltros();
    }

    private void OrdenarTarefas(ChangeEventArgs e)
    {
        ordenacao = e.Value?.ToString() ?? "prioridade";
        AplicarFiltros();
    }

    private void AplicarFiltros()
    {
        if (tarefas == null) return;

        tarefasFiltradas = tarefas.AsEnumerable().ToList();

        // Filtro por prioridade
        if (filtroPrioridade.HasValue)
        {
            tarefasFiltradas = tarefasFiltradas.Where(t => t.Prioridade == filtroPrioridade.Value).ToList();
        }

        // Filtro por categoria
        if (!string.IsNullOrEmpty(filtroCategoria))
        {
            tarefasFiltradas = tarefasFiltradas.Where(t => t.Categoria == filtroCategoria).ToList();
        }

        // OrdenaÃ§Ã£o
        tarefasFiltradas = ordenacao switch
        {
            "vencimento" => tarefasFiltradas.OrderBy(t => t.DataVencimento ?? DateTime.MaxValue).ToList(),
            "criacao" => tarefasFiltradas.OrderBy(t => t.CreatedAt).ToList(),
            "titulo" => tarefasFiltradas.OrderBy(t => t.Titulo).ToList(),
            _ => tarefasFiltradas.OrderByDescending(t => t.Prioridade).ThenBy(t => t.DataVencimento ?? DateTime.MaxValue).ToList()
        };

        tarefasFiltradas = tarefasFiltradas.ToList();
        StateHasChanged();
    }

    private string GetPrioridadeColor(PrioridadeTarefa prioridade)
    {
        return prioridade switch
        {
            PrioridadeTarefa.Baixa => "secondary",
            PrioridadeTarefa.Media => "primary",
            PrioridadeTarefa.Alta => "warning",
            PrioridadeTarefa.Critica => "danger",
            _ => "secondary"
        };
    }

    private string GetPrioridadeIcon(PrioridadeTarefa prioridade)
    {
        return prioridade switch
        {
            PrioridadeTarefa.Baixa => "ðŸŸ¢",
            PrioridadeTarefa.Media => "ðŸŸ¡",
            PrioridadeTarefa.Alta => "ðŸŸ ",
            PrioridadeTarefa.Critica => "ðŸ”´",
            _ => "âšª"
        };
    }

    private string GetCorVencimento(TarefaDto tarefa)
    {
        if (!tarefa.DataVencimento.HasValue) return "text-muted";
        if (tarefa.EstaVencida) return "text-danger";
        
        var diasRestantes = (tarefa.DataVencimento.Value.Date - DateTime.Today).Days;
        return diasRestantes <= 3 ? "text-warning" : "text-success";
    }

    private int GetTempoEspera(TarefaDto tarefa)
    {
        return (DateTime.Today - tarefa.CreatedAt.Date).Days;
    }

    private int GetTarefasAltaPrioridade()
    {
        if (tarefas == null) return 0;
        return tarefas.Count(t => t.Prioridade == PrioridadeTarefa.Alta || t.Prioridade == PrioridadeTarefa.Critica);
    }

    private int GetTarefasComPrazo()
    {
        if (tarefas == null) return 0;
        return tarefas.Count(t => t.DataVencimento.HasValue);
    }

    private int GetCategoriasUnicas()
    {
        if (tarefas == null) return 0;
        return tarefas.Where(t => !string.IsNullOrEmpty(t.Categoria))
                     .Select(t => t.Categoria)
                     .Distinct()
                     .Count();
    }

    private List<string> GetCategorias()
    {
        if (tarefas == null) return new List<string>();
        return tarefas.Where(t => !string.IsNullOrEmpty(t.Categoria))
                     .Select(t => t.Categoria!)
                     .Distinct()
                     .OrderBy(c => c)
                     .ToList();
    }
}

