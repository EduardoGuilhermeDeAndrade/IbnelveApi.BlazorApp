@page "/pessoas"
@inject IPessoaService PessoaService
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Pessoas - IbnelveApi</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Gestão de Pessoas</h1>
    <a href="/pessoas/nova" class="btn btn-primary">
        <i class="fas fa-user-plus me-2"></i>Nova Pessoa
    </a>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
        <p class="mt-2 text-muted">Carregando pessoas...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
    </div>
}
else
{
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Buscar por nome</label>
                    <div class="input-group">
                        <input @bind="searchTerm" @onkeypress="OnSearchKeyPress" class="form-control" placeholder="Digite o nome..." />
                        <button class="btn btn-outline-secondary" @onclick="SearchPessoas">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">CPF</label>
                    <input @bind="cpfSearch" @onkeypress="OnCpfKeyPress" class="form-control" placeholder="000.000.000-00" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-secondary me-2" @onclick="ClearFilters">
                        <i class="fas fa-times me-1"></i>Limpar
                    </button>
                    <button class="btn btn-outline-primary" @onclick="LoadPessoas">
                        <i class="fas fa-sync-alt me-1"></i>Atualizar
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (pessoas?.Any() == true)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-users me-2"></i>
                    Pessoas Cadastradas (@pessoas.Count())
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Nome</th>
                                <th>CPF</th>
                                <th>Telefone</th>
                                <th>Cidade</th>
                                <th>Cadastro</th>
                                <th width="120">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pessoa in pessoas)
                            {
                                <tr>
                                    <td>
                                        <strong>@pessoa.Nome</strong>
                                    </td>
                                    <td>
                                        <code>@pessoa.CPF</code>
                                    </td>
                                    <td>@pessoa.Telefone</td>
                                    <td>@pessoa.Endereco.Cidade/@pessoa.Endereco.UF</td>
                                    <td>
                                        <small class="text-muted">@pessoa.CreatedAt.ToString("dd/MM/yyyy")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => ViewPessoa(pessoa.Id)" title="Visualizar">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-warning" @onclick="() => EditPessoa(pessoa.Id)" title="Editar">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeletePessoa(pessoa.Id)" title="Excluir">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-users fa-3x text-muted mb-3"></i>
            <h4>Nenhuma pessoa encontrada</h4>
            <p class="text-muted">Comece cadastrando uma nova pessoa.</p>
            <a href="/pessoas/nova" class="btn btn-primary">
                <i class="fas fa-user-plus me-2"></i>Cadastrar Primeira Pessoa
            </a>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string searchTerm = string.Empty;
    private string cpfSearch = string.Empty;
    private IEnumerable<PessoaDto>? pessoas;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadPessoas();
    }

    private async Task LoadPessoas()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await PessoaService.GetAllAsync();
            if (result.Success)
            {
                pessoas = result.Data;
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar pessoas: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchPessoas()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadPessoas();
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await PessoaService.SearchByNameAsync(searchTerm);
            if (result.Success)
            {
                pessoas = result.Data;
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro na busca: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchByCpf()
    {
        if (string.IsNullOrWhiteSpace(cpfSearch))
            return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await PessoaService.GetByCpfAsync(cpfSearch);
            if (result.Success && result.Data != null)
            {
                pessoas = new[] { result.Data };
            }
            else
            {
                pessoas = Enumerable.Empty<PessoaDto>();
                errorMessage = "CPF não encontrado";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro na busca por CPF: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        cpfSearch = string.Empty;
        await LoadPessoas();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPessoas();
        }
    }

    private async Task OnCpfKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchByCpf();
        }
    }

    private void ViewPessoa(int id)
    {
        Navigation.NavigateTo($"/pessoas/{id}");
    }

    private void EditPessoa(int id)
    {
        Navigation.NavigateTo($"/pessoas/{id}/editar");
    }

    private async Task DeletePessoa(int id)
    {
        if (await ConfirmDelete())
        {
            try
            {
                var result = await PessoaService.DeleteAsync(id);
                if (result.Success)
                {
                    await LoadPessoas();
                }
                else
                {
                    errorMessage = result.Message;
                }
            }
            catch (Exception ex)
            {
                errorMessage = "Erro ao excluir pessoa: " + ex.Message;
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // Implementação simples - em produção usar modal
        return true;
    }
}

