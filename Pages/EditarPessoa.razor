@page "/pessoas/{id:int}/editar"
@inject IPessoaService PessoaService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Editar Pessoa - IbnelveApi</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/" class="text-decoration-none">
                            <i class="fas fa-home me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/pessoas" class="text-decoration-none">
                            <i class="fas fa-users me-1"></i>Pessoas
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/pessoas/@Id" class="text-decoration-none">
                            <i class="fas fa-user me-1"></i>@(pessoaAtual?.Nome ?? "Pessoa")
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-edit me-1"></i>Editar
                    </li>
                </ol>
            </nav>

            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="fas fa-user-edit me-2 text-warning"></i>
                        Editar Pessoa
                    </h1>
                    <p class="text-muted mb-0">
                        @if (pessoaAtual != null)
                        {
                            <span>Editando: <strong>@pessoaAtual.Nome</strong></span>
                        }
                        else
                        {
                            <span>Carregando dados da pessoa...</span>
                        }
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/pessoas/@Id" class="btn btn-outline-info">
                        <i class="fas fa-eye me-2"></i>Visualizar
                    </a>
                    <a href="/pessoas" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Voltar
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (isLoadingData)
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                        <h5>Carregando dados da pessoa...</h5>
                        <p class="text-muted">Aguarde enquanto buscamos as informações.</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(loadErrorMessage))
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-exclamation-triangle me-2"></i>Erro ao carregar
                    </h4>
                    <p>@loadErrorMessage</p>
                    <hr>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-danger" @onclick="LoadPessoa">
                            <i class="fas fa-sync-alt me-2"></i>Tentar novamente
                        </button>
                        <a href="/pessoas" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Voltar para lista
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (pessoaAtual != null && editPessoa != null)
    {
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-user-edit me-2"></i>
                            Editando: @pessoaAtual.Nome
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle me-2"></i>
                                @successMessage
                                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                            </div>
                        }

                        <!-- Informações de Auditoria -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body py-2">
                                        <div class="row text-center">
                                            <div class="col-md-4">
                                                <small class="text-muted d-block">Criado em</small>
                                                <strong>@pessoaAtual.CreatedAt.ToString("dd/MM/yyyy HH:mm")</strong>
                                            </div>
                                            <div class="col-md-4">
                                                <small class="text-muted d-block">Última atualização</small>
                                                <strong>@pessoaAtual.UpdatedAt?.ToString("dd/MM/yyyy HH:mm")  </strong>
                                            </div>
                                            <div class="col-md-4">
                                                <small class="text-muted d-block">ID</small>
                                                <strong>#@pessoaAtual.Id</strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <EditForm Model="editPessoa" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            
                            <!-- Dados Pessoais -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <h6 class="text-warning border-bottom pb-2 mb-3">
                                        <i class="fas fa-user me-2"></i>Dados Pessoais
                                    </h6>
                                </div>
                                
                                <div class="col-md-8 mb-3">
                                    <label for="nome" class="form-label fw-semibold">
                                        Nome Completo <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-user text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Nome" class="form-control" id="nome" 
                                                   placeholder="Digite o nome completo" maxlength="200" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Nome)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="cpf" class="form-label fw-semibold">
                                        CPF <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-id-card text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.CPF" class="form-control" id="cpf" 
                                                   placeholder="000.000.000-00" maxlength="14" @oninput="FormatCPF" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.CPF)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="telefone" class="form-label fw-semibold">
                                        Telefone <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-phone text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Telefone" class="form-control" id="telefone" 
                                                   placeholder="(00) 00000-0000" maxlength="15" @oninput="FormatTelefone" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Telefone)" class="text-danger small mt-1" />
                                </div>
                            </div>

                            <!-- Endereço -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <h6 class="text-warning border-bottom pb-2 mb-3">
                                        <i class="fas fa-map-marker-alt me-2"></i>Endereço
                                    </h6>
                                </div>

                                <div class="col-md-3 mb-3">
                                    <label for="cep" class="form-label fw-semibold">
                                        CEP <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-mail-bulk text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Endereco.CEP" class="form-control" id="cep" 
                                                   placeholder="00000-000" maxlength="9" @oninput="FormatCEP" @onblur="BuscarCEP" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Endereco.CEP)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-9 mb-3">
                                    <label for="rua" class="form-label fw-semibold">
                                        Rua/Logradouro <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-road text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Endereco.Rua" class="form-control" id="rua" 
                                                   placeholder="Digite o endereço completo" maxlength="200" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Endereco.Rua)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="bairro" class="form-label fw-semibold">
                                        Bairro <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-building text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Endereco.Bairro" class="form-control" id="bairro" 
                                                   placeholder="Digite o bairro" maxlength="100" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Endereco.Bairro)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="cidade" class="form-label fw-semibold">
                                        Cidade <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-city text-muted"></i>
                                        </span>
                                        <InputText @bind-Value="editPessoa.Endereco.Cidade" class="form-control" id="cidade" 
                                                   placeholder="Digite a cidade" maxlength="100" />
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Endereco.Cidade)" class="text-danger small mt-1" />
                                </div>

                                <div class="col-md-2 mb-3">
                                    <label for="uf" class="form-label fw-semibold">
                                        UF <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-flag text-muted"></i>
                                        </span>
                                        <InputSelect @bind-Value="editPessoa.Endereco.UF" class="form-select" id="uf">
                                            <option value="">Selecione</option>
                                            <option value="AC">AC</option>
                                            <option value="AL">AL</option>
                                            <option value="AP">AP</option>
                                            <option value="AM">AM</option>
                                            <option value="BA">BA</option>
                                            <option value="CE">CE</option>
                                            <option value="DF">DF</option>
                                            <option value="ES">ES</option>
                                            <option value="GO">GO</option>
                                            <option value="MA">MA</option>
                                            <option value="MT">MT</option>
                                            <option value="MS">MS</option>
                                            <option value="MG">MG</option>
                                            <option value="PA">PA</option>
                                            <option value="PB">PB</option>
                                            <option value="PR">PR</option>
                                            <option value="PE">PE</option>
                                            <option value="PI">PI</option>
                                            <option value="RJ">RJ</option>
                                            <option value="RN">RN</option>
                                            <option value="RS">RS</option>
                                            <option value="RO">RO</option>
                                            <option value="RR">RR</option>
                                            <option value="SC">SC</option>
                                            <option value="SP">SP</option>
                                            <option value="SE">SE</option>
                                            <option value="TO">TO</option>
                                        </InputSelect>
                                    </div>
                                    <ValidationMessage For="@(() => editPessoa.Endereco.UF)" class="text-danger small mt-1" />
                                </div>
                            </div>

                            <!-- Botões -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex justify-content-end gap-2">
                                        <a href="/pessoas/@Id" class="btn btn-outline-secondary">
                                            <i class="fas fa-times me-2"></i>Cancelar
                                        </a>
                                        <button type="button" class="btn btn-outline-info" @onclick="ResetarAlteracoes">
                                            <i class="fas fa-undo me-2"></i>Desfazer Alterações
                                        </button>
                                        <button type="submit" class="btn btn-warning" disabled="@isLoading">
                                            @if (isLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Salvando...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-save me-2"></i>
                                                <span>Salvar Alterações</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private PessoaDto? pessoaAtual;
    private UpdatePessoaDto? editPessoa;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string loadErrorMessage = string.Empty;
    private bool isLoading = false;
    private bool isLoadingData = true;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadPessoa();
    }

    private async Task LoadPessoa()
    {
        isLoadingData = true;
        loadErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await PessoaService.GetByIdAsync(Id);
            if (result.Success && result.Data != null)
            {
                pessoaAtual = result.Data;
                editPessoa = new UpdatePessoaDto
                {
                    Nome = pessoaAtual.Nome,
                    CPF = pessoaAtual.CPF,
                    Telefone = pessoaAtual.Telefone,
                    Endereco = new EnderecoDto
                    {
                        CEP = pessoaAtual.Endereco.CEP,
                        Rua = pessoaAtual.Endereco.Rua,
                        Bairro = pessoaAtual.Endereco.Bairro,
                        Cidade = pessoaAtual.Endereco.Cidade,
                        UF = pessoaAtual.Endereco.UF
                    }
                };
            }
            else
            {
                loadErrorMessage = result.Message ?? "Pessoa não encontrada.";
            }
        }
        catch (Exception ex)
        {
            loadErrorMessage = "Erro ao carregar dados: " + ex.Message;
        }
        finally
        {
            isLoadingData = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (editPessoa == null) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await PessoaService.UpdateAsync(Id, editPessoa);
            
            if (result.Success)
            {
                successMessage = "Pessoa atualizada com sucesso!";
                await JSRuntime.InvokeVoidAsync("scrollTo", 0, 0);
                
                // Recarregar dados atualizados
                await LoadPessoa();
            }
            else
            {
                errorMessage = result.Message;
                if (result.Errors?.Any() == true)
                {
                    errorMessage += " " + string.Join(", ", result.Errors);
                }
                await JSRuntime.InvokeVoidAsync("scrollTo", 0, 0);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado: " + ex.Message;
            await JSRuntime.InvokeVoidAsync("scrollTo", 0, 0);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetarAlteracoes()
    {
        if (pessoaAtual != null)
        {
            editPessoa = new UpdatePessoaDto
            {
                Nome = pessoaAtual.Nome,
                CPF = pessoaAtual.CPF,
                Telefone = pessoaAtual.Telefone,
                Endereco = new EnderecoDto
                {
                    CEP = pessoaAtual.Endereco.CEP,
                    Rua = pessoaAtual.Endereco.Rua,
                    Bairro = pessoaAtual.Endereco.Bairro,
                    Cidade = pessoaAtual.Endereco.Cidade,
                    UF = pessoaAtual.Endereco.UF
                }
            };
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();
        }
    }

    private async Task FormatCPF(ChangeEventArgs e)
    {
        if (editPessoa == null) return;
        
        var value = e.Value?.ToString() ?? "";
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        
        if (numbers.Length <= 11)
        {
            if (numbers.Length > 3 && numbers.Length <= 6)
                editPessoa.CPF = $"{numbers.Substring(0, 3)}.{numbers.Substring(3)}";
            else if (numbers.Length > 6 && numbers.Length <= 9)
                editPessoa.CPF = $"{numbers.Substring(0, 3)}.{numbers.Substring(3, 3)}.{numbers.Substring(6)}";
            else if (numbers.Length > 9)
                editPessoa.CPF = $"{numbers.Substring(0, 3)}.{numbers.Substring(3, 3)}.{numbers.Substring(6, 3)}-{numbers.Substring(9)}";
            else
                editPessoa.CPF = numbers;
        }
    }

    private async Task FormatTelefone(ChangeEventArgs e)
    {
        if (editPessoa == null) return;
        
        var value = e.Value?.ToString() ?? "";
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        
        if (numbers.Length <= 11)
        {
            if (numbers.Length > 2 && numbers.Length <= 7)
                editPessoa.Telefone = $"({numbers.Substring(0, 2)}) {numbers.Substring(2)}";
            else if (numbers.Length > 7)
                editPessoa.Telefone = $"({numbers.Substring(0, 2)}) {numbers.Substring(2, numbers.Length == 11 ? 5 : 4)}-{numbers.Substring(numbers.Length == 11 ? 7 : 6)}";
            else if (numbers.Length > 0)
                editPessoa.Telefone = numbers.Length > 2 ? $"({numbers.Substring(0, 2)}) {numbers.Substring(2)}" : numbers;
        }
    }

    private async Task FormatCEP(ChangeEventArgs e)
    {
        if (editPessoa?.Endereco == null) return;
        
        var value = e.Value?.ToString() ?? "";
        var numbers = new string(value.Where(char.IsDigit).ToArray());
        
        if (numbers.Length <= 8)
        {
            if (numbers.Length > 5)
                editPessoa.Endereco.CEP = $"{numbers.Substring(0, 5)}-{numbers.Substring(5)}";
            else
                editPessoa.Endereco.CEP = numbers;
        }
    }

    private async Task BuscarCEP()
    {
        if (editPessoa?.Endereco == null) return;
        
        var cep = new string(editPessoa.Endereco.CEP.Where(char.IsDigit).ToArray());
        
        if (cep.Length == 8)
        {
            try
            {
                // Implementar busca de CEP se necessário
            }
            catch
            {
                // Ignorar erros de busca de CEP
            }
        }
    }
}

